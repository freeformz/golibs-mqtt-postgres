package util

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

type TestItem struct {
	Name string
}

func TestToString(t *testing.T) {
	assert.Equal(t,
		"",
		ToString(nil),
	)
	assert.Equal(t,
		"1.23456",
		ToString("1.23456"),
	)
	assert.Equal(t,
		"1431470560",
		ToString(1431470560),
	)
	assert.Equal(t,
		"1.23",
		ToString(float32(1.23)),
	)
	assert.Equal(t,
		"132.123456789",
		ToString(float64(132.123456789)),
	)
	assert.Equal(t,
		"123456",
		ToString(int(123456)),
	)
	assert.Equal(t,
		"1",
		ToString(int8(1)),
	)
	assert.Equal(t,
		"11",
		ToString(int16(11)),
	)
	assert.Equal(t,
		"111",
		ToString(int32(111)),
	)
	assert.Equal(t,
		"1431470560",
		ToString(int64(1431470560)),
	)
	assert.Equal(t,
		"1",
		ToString(uint(1)),
	)
	assert.Equal(t,
		"1",
		ToString(uint8(1)),
	)
	assert.Equal(t,
		"11",
		ToString(uint16(11)),
	)
	assert.Equal(t,
		"111",
		ToString(uint32(111)),
	)
	assert.Equal(t,
		"1111",
		ToString(uint64(1111)),
	)
	assert.Equal(t,
		"11111",
		ToString(uintptr(11111)),
	)
	assert.Equal(t,
		"{Name:taro}",
		ToString(TestItem{Name: "taro"}),
	)
}

func TestToInt64(t *testing.T) {
	assert.Equal(t,
		int64(0),
		ToInt64(nil),
	)
	assert.Equal(t,
		int64(0),
		ToInt64(""),
	)
	assert.Equal(t,
		int64(1),
		ToInt64("1"),
	)
	assert.Equal(t,
		int64(1),
		ToInt64("1.23456"),
	)
	assert.Equal(t,
		int64(2),
		ToInt64(float32(1.5)),
	)
	assert.Equal(t,
		int64(1),
		ToInt64(float64(1.23456)),
	)
	assert.Equal(t,
		int64(123456),
		ToInt64(int(123456)),
	)
	assert.Equal(t,
		int64(1),
		ToInt64(int8(1)),
	)
	assert.Equal(t,
		int64(11),
		ToInt64(int16(11)),
	)
	assert.Equal(t,
		int64(111),
		ToInt64(int32(111)),
	)
	assert.Equal(t,
		int64(1111),
		ToInt64(int64(1111)),
	)
	assert.Equal(t,
		int64(1),
		ToInt64(uint(1)),
	)
	assert.Equal(t,
		int64(1),
		ToInt64(uint8(1)),
	)
	assert.Equal(t,
		int64(11),
		ToInt64(uint16(11)),
	)
	assert.Equal(t,
		int64(111),
		ToInt64(uint32(111)),
	)
	assert.Equal(t,
		int64(1111),
		ToInt64(uint64(1111)),
	)
	assert.Equal(t,
		int64(11111),
		ToInt64(uintptr(11111)),
	)
}

func TestToFloat64(t *testing.T) {
	assert.Equal(t,
		float64(0),
		ToFloat64(nil),
	)
	assert.Equal(t,
		float64(0),
		ToFloat64(""),
	)
	assert.Equal(t,
		float64(1),
		ToFloat64("1"),
	)
	assert.Equal(t,
		float64(1.23456),
		ToFloat64("1.23456"),
	)
	assert.Equal(t,
		float64(1.5),
		ToFloat64(float32(1.5)),
	)
	assert.Equal(t,
		float64(1.23456),
		ToFloat64(float64(1.23456)),
	)
	assert.Equal(t,
		float64(123456),
		ToFloat64(int(123456)),
	)
	assert.Equal(t,
		float64(1),
		ToFloat64(int8(1)),
	)
	assert.Equal(t,
		float64(11),
		ToFloat64(int16(11)),
	)
	assert.Equal(t,
		float64(111),
		ToFloat64(int32(111)),
	)
	assert.Equal(t,
		float64(1111),
		ToFloat64(int64(1111)),
	)
	assert.Equal(t,
		float64(1),
		ToFloat64(uint(1)),
	)
	assert.Equal(t,
		float64(1),
		ToFloat64(uint8(1)),
	)
	assert.Equal(t,
		float64(11),
		ToFloat64(uint16(11)),
	)
	assert.Equal(t,
		float64(111),
		ToFloat64(uint32(111)),
	)
	assert.Equal(t,
		float64(1111),
		ToFloat64(uint64(1111)),
	)
	assert.Equal(t,
		float64(11111),
		ToFloat64(uintptr(11111)),
	)
}
